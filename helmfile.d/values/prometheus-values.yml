prometheus:
  ingress:
    enabled: true
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - admin'
    path: /
    hosts:
      - prometheus.somikhailov.fun

  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    tolerations:
      - key: node-role
        operator: Equal
        value: infra
        effect: NoSchedule
    nodeSelector: 
      pool: infra

grafana:
  enabled: true
  ingress:
    enabled: true
    annotations: 
      kubernetes.io/ingress.class: nginx
    path: /
    hosts:
      - grafana.somikhailov.fun

  tolerations:
    - key: node-role
      operator: Equal
      value: infra
      effect: NoSchedule
  nodeSelector: 
    pool: infra

alertmanager:
  enabled: true
  ingress:
    enabled: true
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - admin'
    path: /
    hosts:
      - alertmanager.somikhailov.fun
  extraSecret:
    annotations: {}
    data: {}
    auth: |
      admin:$2b$12$RCpUySoxzPOxNpcvZTU60uoxm1C9W5JTex9qqpMWRepm7/BGOOMrW

  alertmanagerSpec:
    tolerations:
      - key: node-role
        operator: Equal
        value: infra
        effect: NoSchedule
    nodeSelector: 
     pool: infra

kube-state-metrics:
  tolerations:
    - key: node-role
      operator: Equal
      value: infra
      effect: NoSchedule
  nodeSelector: 
    pool: infra

prometheusOperator:
  tolerations:
    - key: node-role
      operator: Equal
      value: infra
      effect: NoSchedule
  nodeSelector: 
    pool: infra